{ pkgs, pre-commit-hooks, fenix, system, withEmulator ? false }:

with pkgs;

let
  pre-commit-check = pre-commit-hooks.lib.${system}.run {
    src = ./.;
    hooks = {
      cargo-check.enable = true;
      deadnix.enable = true;
      nixpkgs-fmt.enable = true;
      rustfmt.enable = true;
    };
    excludes = [
    ];
  };
  android = {
    versions = {
      cmdLineToolsVersion = "11.0";
      platformTools = "34.0.4";
      buildTools = "34.0.0";
      ndk = [
        "25.1.8937393"
      ];
      cmake = "3.22.1";
      emulator = "33.1.17";
    };

    platforms = [
      "33"
      "31"
      "30"
    ];
    abis = [
      "x86_64"
    ];
  };

  androidEnv = pkgs.androidenv.override {
    inherit pkgs;
    licenseAccepted = true;
  };

  androidComposition = androidEnv.composeAndroidPackages {
    cmdLineToolsVersion = android.versions.cmdLineToolsVersion;
    platformToolsVersion = android.versions.platformTools;
    buildToolsVersions = [ android.versions.buildTools "30.0.3" ];
    platformVersions = android.platforms;
    abiVersions = android.abis;
    includeNDK = true;
    includeSystemImages = true;
    ndkVersions = android.versions.ndk;
    cmakeVersions = [
      android.versions.cmake
      "3.18.1"
    ];
    includeEmulator = withEmulator;
    emulatorVersion = android.versions.emulator;

    extraLicenses = [
      "android-sdk-license"
      "android-sdk-preview-license"
      "android-googletv-license"
      "android-sdk-arm-dbt-license"
      "google-gdk-license"
      "intel-android-extra-license"
      "intel-android-sysimage-license"
      "mips-android-sysimage-license"
    ];

  };


  androidSdk = androidComposition.androidsdk;
  platformTools = androidComposition.platform-tools;
  jdk = pkgs.jdk17;

  toolchain = import ./flake.toolchain.nix {
    inherit pkgs lib system stdenv fenix androidSdk;
  };
in
mkShell {
  nativeBuildInputs = [
    toolchain.fenixToolchainCrossAll
    pkg-config
  ];

  buildInputs = [
    capnproto
    cargo-outdated
    openssl
    protobuf
    cargo-llvm-cov
  ];
  packages = [
    chromium
    android-studio
    androidSdk
    cairo
    capnproto
    jdk
    pkg-config
    platformTools
    protobuf
    python3
    # for desktop
    gtk3
    libsoup_3
    webkitgtk_4_1

  ];


  LANG = "C.UTF-8";
  LC_ALL = "C.UTF-8";
  JAVA_HOME = jdk.home;

  # Note: ANDROID_HOME is deprecated. Use ANDROID_SDK_ROOT.

  # Ensures that we don't have to use a FHS env by using the nix store's aapt2.



  shellHook = toolchain.androidCrossEnvVars
    + toolchain.wasm32CrossEnvVars
    + ''
    ${pre-commit-check.shellHook}
    cmake_root="$(echo "$ANDROID_SDK_ROOT/cmake/${android.versions.cmake}"*/)"
    export CHROME_EXECUTABLE="${pkgs.chromium}/bin/chromium";
    export ANDROID_SDK_ROOT="${androidSdk}/libexec/android-sdk";
    export ANDROID_HOME="${androidSdk}/libexec/android-sdk";
    export PATH="$cmake_root/bin:$PATH:${pkgs.android-studio}/bin"
    export ANDROID_NDK_ROOT="$ANDROID_SDK_ROOT/ndk-bundle";
    export GRADLE_OPTS="-Dorg.gradle.project.android.aapt2FromMavenOverride=$ANDROID_SDK_ROOT/build-tools/${android.versions.buildTools}/aapt2";
    export NDK_HOME="$ANDROID_SDK_ROOT/ndk-bundle";
    export LD_LIBRARY_PATH="./build/linux/x64/debug/bundle/lib:$LD_LIBRARY_PATH"
    # Write out local.properties for Android Studio.
    cat <<EOF > local.properties
    # This file was automatically generated by nix-shell.
    sdk.dir=$ANDROID_SDK_ROOT
    ndk.dir=$ANDROID_NDK_ROOT
    cmake.dir=$cmake_root
    flutter config --android-sdk $ANDROID_SDK_ROOT
    EOF

  '';
}

